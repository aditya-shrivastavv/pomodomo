#!python
import time
import winsound
import threading
from argparse import ArgumentParser
from plyer import notification
from os import path


def toaster(title, message, type):
    notification.notify(
        title=title,
        message=message,
        app_name="Pomodomo",
        app_icon=(
            path.abspath("./icons/break.ico")
            if type == "break"
            else path.abspath("./icons/work.ico")
        ),
    )


WORKTIME = 25
BREAKTIME = 5

parser = ArgumentParser(
    prog="pomodomo",
    description="Simple Pomodoro Timer with Windows and Sound Notification.! ‚åõ",
    epilog="Author - Aditya Shrivastav",
)
parser.add_argument(
    "-r", "--repeat", help="Repeat the cycle", action="store_true", default=False
)
parser.add_argument(
    "-s", "--sound", help="Play sound", action="store_true", default=False
)
parser.add_argument(
    "-t",
    "--worktime",
    type=int,
    default=WORKTIME,
    help=f"Start a clock for n minutes (default {WORKTIME} minutes)",
)
parser.add_argument(
    "-b",
    "--breaktime",
    type=int,
    default=BREAKTIME,
    help=f"Start a break for n minutes (default {BREAKTIME} minutes)",
)
raw_args = parser.parse_args()
args = {
    "time": int(raw_args.worktime),
    "break": int(raw_args.breaktime),
    "repeat": bool(raw_args.repeat),
    "sound": bool(raw_args.sound),
}


def sound_player(kind):
    if kind == "w":
        winsound.PlaySound("./assets/work-over.wav", winsound.SND_FILENAME)
    elif kind == "b":
        winsound.PlaySound("./assets/break-over.wav", winsound.SND_FILENAME)
    else:
        # Play default sound
        winsound.PlaySound("", winsound.SND_FILENAME)


def timer(minutes, message="", kind=""):
    start_time = time.perf_counter()
    sound_played = False
    while True:
        diff_seconds = int(round(time.perf_counter() - start_time))
        left_seconds = minutes * 60 - diff_seconds
        if left_seconds <= 0:
            print("")
            break

        # Sound
        if args["sound"] and left_seconds <= 5 and not sound_played:
            sound_played = True
            # Start playing in background
            sound_thread = threading.Thread(target=sound_player, args=kind)
            sound_thread.start()

        seconds_slot = int(left_seconds % 60)
        seconds_str = (
            str(seconds_slot) if seconds_slot >= 10 else "0{}".format(seconds_slot)
        )

        countdown = "{}:{} ‚è∞".format(int(left_seconds / 60), seconds_str)
        duration = min(minutes, 25)
        progressbar(diff_seconds, minutes * 60, duration, countdown)
        time.sleep(1)

    print(f"\nüîî  {message}")


def progressbar(curr, total, duration=10, extra=""):
    frac = curr / total
    filled = round(frac * duration)
    print(
        "\r",
        "‚åö" * filled + "--" * (duration - filled),
        "[{:.0%}]".format(frac),
        extra,
        end="",
    )


def run():
    if not args["repeat"]:
        print(f'‚è≤Ô∏è  timer {args["time"]} minutes. Ctrl+C to exit')
        timer(args["time"], "You can take a break now", "w")
        toaster(
            title="üõå You can take a break now",
            message="Go look something that's 20 feet away",
            type="break",
        )
        return

    cycle = 0
    while True:
        print("üö¥‚Äç‚ôÇÔ∏è Cycle,", cycle)
        print(f'‚è≤Ô∏è  timer {args["time"]} minutes. Ctrl+C to exit')
        timer(args["time"], "Break time!", "w")
        toaster(
            title=f"üå∏ Break Time...({args['break']} mins)",
            message="Go look something that's 20 feet away",
            type="break",
        )
        print(f'üõÄ  break {args["break"]} minutes. Ctrl+C to exit')
        timer(args["break"], "Work time!", "b")
        toaster(
            title=f"‚öíÔ∏è Work Time...({args['time']})",
            message="Work like hell, be elon musk",
            type="work",
        )
        cycle += 1


def main():
    try:
        run()
    except KeyboardInterrupt:
        print("\nüëã goodbye")
    except Exception as ex:
        print(ex)
        exit(1)


if __name__ == "__main__":
    main()
